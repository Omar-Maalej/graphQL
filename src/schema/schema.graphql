type Query {
  getAllCvs: [Cv]
  getCvById(id: Int!): Cv
  getUserById(id: Int!): User
  getSkillById(id: Int!): Skill
}

type Cv {
  id: ID!
  name: String!
  age: Int!
  job: String!
  skills: [Skill]
  user: User
}

type Skill {
  id: ID!
  designation: String!
  cvs: [Cv]
}

enum Role {
  ADMIN
  USER
}

type User {
  id: ID!
  name: String!
  email: String!
  role: Role
  cvs: [Cv]
}

input CvInfoInput {
  name: String
  age: Int
  job: String
  skillIds: [String]
  userId: String
}

input AsyncCvInfoInput {
  name: String
  age: Int
  job: String
  skillIds: [Int]
  userId: Int
}

type Mutation {
  createCv(input: AsyncCvInfoInput): Cv
  updateCv(id: Int!, input: AsyncCvInfoInput): Cv
  deleteCv(id: Int!): String!
}

type Subscription {
  cvAdded: Cv
  cvUpdated: Cv
  cvDeleted: String
}
